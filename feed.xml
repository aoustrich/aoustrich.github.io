<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://aoustrich.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://aoustrich.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-12T04:08:23+00:00</updated><id>https://aoustrich.github.io/feed.xml</id><title type="html">blank</title><subtitle>Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Unveiling the Construction Conundrum: Over-Promising, Under-Delivering, and the Data Behind Project Realities - Part 2</title><link href="https://aoustrich.github.io/blog/2023/Construction-Delays-Part-2/" rel="alternate" type="text/html" title="Unveiling the Construction Conundrum: Over-Promising, Under-Delivering, and the Data Behind Project Realities - Part 2"/><published>2023-12-11T13:30:00+00:00</published><updated>2023-12-11T13:30:00+00:00</updated><id>https://aoustrich.github.io/blog/2023/Construction-Delays-Part-2</id><content type="html" xml:base="https://aoustrich.github.io/blog/2023/Construction-Delays-Part-2/"><![CDATA[<blockquote class="block-tip"> <h5 id="important-links">Important Links</h5> <p>Check out <a href="https://aoustrich.github.io/blog/2023/Construction-Delays-Part-1/">Part 1</a>! Take a look at my <a href="https://github.com/aoustrich/NYC_ConstructionDelays">GitHub repo</a> with all my code.</p> </blockquote> <p>Right from the start I want to clarify that after looking into this data I’ve realized that my original question cannot be answered (at least right now).</p> <p>Perhaps the most important thing to recognize is that I know next to nothing about how government construction projects <em>actually</em> work. I don’t know how detailed project proposals are or the intricacies of the bidding process.</p> <p>I did find some answers about construction projects but the limitations of my own knowledge and the data prevent me from confidently saying construction companies over promise and then under deliver on projects.</p> <h3 id="data-limitations">Data Limitations</h3> <ul> <li>All planned and actual dates for task completion are on the 1st day of the month so a project that started 1 day late and another that started 30 days late would both be considered to be 1 month late.</li> <li>There is no way to know if government employees did the work or indepedenct contractors. My original suspicion was that independent contractors looking to win large projects and paydays would over promise their abilities because they knew some projects would have to be completed and the city would have no choice but to pay.</li> <li>There are some descriptions about why projects were delayed but there are only 12 different reasons and most are pretty vague. The two most common reasons for all the budget line items (not just the projects included in the Milestones data) are delays caused by budgetary constraints and changes in project scope/design. Changes to scope and design could be influenced by the company doing the work but also by the City and it wouldn’t be fair to blame a company’s project proposal for being way off if it was actually the City’s fault.</li> <li>The city budget data I collected does not clearly define where the non city money comes from. We can’t readily tell if funds come from State or Federal coffers or if some money is donated by concerned citizens.</li> </ul> <p>Despite these shortcomings from my own knowledge and the data I collected, I still think this project was a success and is a step towards a final answer.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;th data-field="Managing Agency"&gt;Managing Agency&lt;/th&gt;
  &lt;th data-field="Count"&gt;Count&lt;/th&gt;
&lt;/tr&gt;
</code></pre></div></div> <p>&lt;/thead&gt; &lt;/table&gt; –&gt;</p> <h1 id="over-promising-and-under-delivering">Over Promising and Under Delivering?</h1> <h3 id="project-timeline">Project Timeline</h3> <p>My orinigal suspicion was that most construction projects would be finished late, but after looking into all the projects I was shocked to find out that only about 22% (1,987/8,966) projects were completed late.</p> <p>As shown below, approximately 69% (6,203/8,966) projects were both started and finished on time.</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/nyc_construction/Project_Start_Finish_heatmap-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/nyc_construction/Project_Start_Finish_heatmap-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/nyc_construction/Project_Start_Finish_heatmap-1400.webp"/> <img src="/assets/img/nyc_construction/Project_Start_Finish_heatmap.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Project Timeline Heatmap" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Source: <a href="https://data.cityofnewyork.us/City-Government/Capital-Project-Detail-Data-Milestones/s7yh-frbm">Capital Project Detail Data - Milestones</a> </div> <p>It’s important to remember that the dates are tracked on a monthly level so each project has a few week window in which it can be started or completed to be counted as “On Time.”</p> <p>New York City is one of the busiest cities in the world but some borough are less busy than others so I wanted to see if there was a difference in project completions by Borough.</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/nyc_construction/Project_Finish_Statuses_by_Boro-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/nyc_construction/Project_Finish_Statuses_by_Boro-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/nyc_construction/Project_Finish_Statuses_by_Boro-1400.webp"/> <img src="/assets/img/nyc_construction/Project_Finish_Statuses_by_Boro.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Project Finished by Borough" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Notes: "CITYWIDE" means projects took place in at least one Borough. <p>"RICHMOND" is the name of the Borough sometimes known as 'Staten Island'</p> <p>Source: <a href="https://data.cityofnewyork.us/City-Government/Capital-Project-Detail-Data-Milestones/s7yh-frbm">Capital Project Detail Data - Milestones</a> </p> </div> <p>The timeline of a project is important but it’s not the only factor that indicates if Construction companies over promise and under deliver on projects.</p> <h3 id="project-budget">Project Budget</h3> <p>I originally thought that most projects would cost more than the original plan and I was counter-intuitively happy to learn that my theory was correct. As shown below, over half of the 8,578 construction projects were over budget.</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/nyc_construction/Project_Budget_Status_bar-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/nyc_construction/Project_Budget_Status_bar-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/nyc_construction/Project_Budget_Status_bar-1400.webp"/> <img src="/assets/img/nyc_construction/Project_Budget_Status_bar.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Project Budget Statuses" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Source: <a href="https://data.cityofnewyork.us/City-Government/Capital-Project-Detail-Data-Dollars/wa2y-rh4b">Capital Project Detail Data - Dollars</a> </div> <p>Again, I wanted to see if there was a difference between the Boroughs.</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/nyc_construction/Project_Budget_Status_boro_bar-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/nyc_construction/Project_Budget_Status_boro_bar-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/nyc_construction/Project_Budget_Status_boro_bar-1400.webp"/> <img src="/assets/img/nyc_construction/Project_Budget_Status_boro_bar.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Project Budgets Statuses by Borough" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Source: <a href="https://data.cityofnewyork.us/City-Government/Capital-Project-Detail-Data-Dollars/wa2y-rh4b">Capital Project Detail Data - Dollars</a> </div> <p>It’s easy to imagine how some types of projects might be more expensive than others. Comparing a project to paint an entire bridge to one where bathroom sinks are replaced isn’t exactly fair. Since the data don’t have a manageable granularity for the scope of a project, one of the better ways of comparing different scopes is to look at the differences in the agency managing the project.</p> <p>Since there were dozens of agencies in the dataset, I thought it was easiest to show the 5 agencies with the highest and lowest average cost delta (cost delta = total cost - original planned cost).</p> <p>Here are 5 Agencies with the highest average cost delta:</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/nyc_construction/Top_5_Agencies_Highest_Average_Budget_Delta-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/nyc_construction/Top_5_Agencies_Highest_Average_Budget_Delta-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/nyc_construction/Top_5_Agencies_Highest_Average_Budget_Delta-1400.webp"/> <img src="/assets/img/nyc_construction/Top_5_Agencies_Highest_Average_Budget_Delta.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Notes: A positive cost delta indicates that projects cost more than anticipated. <p>All values are in the thousands so a value of 20,000 = $20,000,000</p> <p>Source: <a href="https://data.cityofnewyork.us/City-Government/Capital-Project-Detail-Data-Milestones/s7yh-frbm">Capital Project Detail Data - Milestones</a></p> </div> <p>Here are the 5 Agencies with the lowest average cost delta:</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/nyc_construction/Top_5_Agencies_Lowest_Budget_Delta_bar-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/nyc_construction/Top_5_Agencies_Lowest_Budget_Delta_bar-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/nyc_construction/Top_5_Agencies_Lowest_Budget_Delta_bar-1400.webp"/> <img src="/assets/img/nyc_construction/Top_5_Agencies_Lowest_Budget_Delta_bar.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="5 Lowest Average Budget Deltas" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Notes: A negative cost delta indicates that projects cost less than anticipated. <p>All values are in the thousands so a value of 20,000 = $20,000,000</p> <p>Source: <a href="https://data.cityofnewyork.us/City-Government/Capital-Project-Detail-Data-Milestones/s7yh-frbm">Capital Project Detail Data - Milestones</a></p> </div> <h3 id="are-late-projects-over-budget">Are Late Projects Over Budget?</h3> <p>Now let’s see if projects finished late tend to cost more than anticipated.</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/nyc_construction/Budget_Status_Late_Projects_heatmap-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/nyc_construction/Budget_Status_Late_Projects_heatmap-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/nyc_construction/Budget_Status_Late_Projects_heatmap-1400.webp"/> <img src="/assets/img/nyc_construction/Budget_Status_Late_Projects_heatmap.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Finish and Budget Status Heatmap" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Source: <a href="https://data.cityofnewyork.us/City-Government/Capital-Project-Detail-Data-Milestones/s7yh-frbm">Capital Project Detail Data - Milestones</a> </div> <p>It’s important to note that projects finished later than planned will be somewhat correlated with being over budget since labor costs will increase.</p> <h1 id="conclusion-and-future-analysis">Conclusion and Future Analysis</h1> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>Want to explore the data on your own? Checkout my streamlit app <a href="https://explore-nyc-construction-delays.streamlit.app/"> here.</a></p> </blockquote> <p>I wasn’t able to full answer my question but it does seem that the idea of construction projects over promising and under delivering might have some truth behind it. After analyzing the available data and reconsidering the problem, it seems that public construction projects in New York City are over promising on budgets but for the most part are accurately promising on project timelines.</p> <p>Future anaylsis of the main question would be possible if the previously <a href="#data-limitations">limitations of the data</a> were answered.</p> <p>Have any questions about my code or suggestions for what to do next? Make sure to comment below!</p>]]></content><author><name></name></author><category term="Project"/><category term="links"/><category term="code"/><category term="eda"/><summary type="html"><![CDATA[Exploratory Data Analysis and Conclusion]]></summary></entry><entry><title type="html">Unveiling the Construction Conundrum: Over-Promising, Under-Delivering, and the Data Behind Project Realities - Part 1</title><link href="https://aoustrich.github.io/blog/2023/Construction-Delays-Part-1/" rel="alternate" type="text/html" title="Unveiling the Construction Conundrum: Over-Promising, Under-Delivering, and the Data Behind Project Realities - Part 1"/><published>2023-11-29T13:30:00+00:00</published><updated>2023-11-29T13:30:00+00:00</updated><id>https://aoustrich.github.io/blog/2023/Construction-Delays-Part-1</id><content type="html" xml:base="https://aoustrich.github.io/blog/2023/Construction-Delays-Part-1/"><![CDATA[<p>Have you ever heard the phrase “under promise and over deliver”?</p> <p>This adage is often hailed as a guiding principle for success in business because it advocates for setting conservative expectations and then surpassing them. The idea is that setting low expectations for a project’s scope or timeline and then surpassing that expectation will leave the client “&lt; a href=”https://www.brainyquote.com/quotes/luvvie_ajayi_908808”&gt;pleasantly surprised&lt;/a&gt;” by the delivered results.</p> <p>Maybe it’s okay to “under promise and then over deliver”? It <a href="https://cedw.medium.com/maybe-its-time-to-stop-saying-under-commit-and-over-deliver-4e945e1b70f3">might not convey integrity or build trust</a>, but if the low bar we “under promise” to deliver is high enough for project stakeholders then even if we do not “over deliver” we can still be successful.</p> <p>But what happens when this ethos clashes with the nature of the project and creates a sort of prisoner’s dilemma?</p> <p>Picture the scenario of multiple construction firms vying for a project bid. In an attempt to secure contracts, these companies often succumb to the pressure of over-promising swift project completion at minimal costs. It’s a strategy that seemingly wins bids, yet the ultimate question remains unanswered: can they actually deliver on these ambitious promises?</p> <p>This discrepancy between promised timelines and actual project completion has long been a thorn in the side of stakeholders. Clients eagerly award contracts to the lowest bidder with the fastest projected timeline, only to find themselves grappling with prolonged construction, unexpected delays, and budget overruns.</p> <p>Intrigued by this dilemma, I embarked on a data-driven journey into the heart of construction project timelines to see just how often they are actually delayed and find an answer to the question</p> <blockquote> <p>Do construction projects “under promise and over deliver” or “over promise and under deliver”?</p> </blockquote> <h2 id="getting-a-data-driven-answer">Getting A Data-driven Answer</h2> <p>Finding data to answer this question is tricky and creates a few problems.</p> <ol> <li>It’s easiest to find and access public records but from what I’ve seen, they are usually only for a particular city or state so it will be hard to make conclusions broadly.</li> <li>Each state and city will likely have different ways of storing the data so it’s easiest to focus on one area first and then see if it’s possible to add other areas later on.</li> <li>It’s hard to tell if the local government did the project or if an outside company was hired.</li> </ol> <h4 id="the-data-source">The Data Source</h4> <p>For now, all the analysis is on data from the New York City’s <a href="https://opendata.cityofnewyork.us/">Open Data</a> website. The main data set I’m pulling from is <a href="https://data.cityofnewyork.us/City-Government/Capital-Project-Detail-Data-Milestones/s7yh-frbm">Capital Project Detail Data - Milestones</a>. I chose this because it breaks up each project into different tasks or phases and has data on when each task was scheduled to start and end as well as when it <em>actually</em> started and ended. This data set is provided by the Mayor’s Office of Management and Budget and was last updated just a little over a month before completing this project.</p> <p>All the code I used for this project is included in a GitHub Repository <a href="https://github.com/aoustrich/NYC_ConstructionDelays">here</a>.</p> <p>The raw dataset is very large (almost 500k rows) so to avoid API limits I created an account with the NYC Open Data site and created an API Key and Secret. To maintain privacy, I stored these values in an untracked file within my repository and import the values in line 6 of the <code class="language-plaintext highlighter-rouge">getData.py</code> script.</p> <h4 id="getting-and-cleaning-the-data">Getting and Cleaning the Data</h4> <p>After reading the documentation, the API call was rather straightforward. Since this dataset uses the latest version of the API I was able to add the parameter <code class="language-plaintext highlighter-rouge">?$limit=497727</code> at the end of the url to get all the rows at once and avoid working with pagination.</p> <p>I created a pandas dataframe of the dataset in JSON format and then removed duplicate rows to decrease the size of the final dataset I used for my analysis called <code class="language-plaintext highlighter-rouge">nycMilestones.csv</code>. This final dataset has all 12 columns but only 59,554 rows instead of 497,727.</p> <p>Cleaning the data was relatively easy to do. The most important values are the original and actual start and end dates for the tasks of the projects so I converted them to pandas datetimes and then found the <code class="language-plaintext highlighter-rouge">time delta</code> values for each task.</p> <h2 id="next-step-in-the-project">Next Step in the Project</h2> <p>After defining the research question, finding a data source, collecting, and cleaning the data it’s time to dig in to the heart of the project and start some EDA.</p> <p>Stay tuned for Part 2!</p>]]></content><author><name></name></author><category term="Project"/><category term="links"/><category term="code"/><category term="api"/><summary type="html"><![CDATA[Defining the Research Question and Getting the Data]]></summary></entry><entry><title type="html">3 Life Lessons from the Creator of Numpy and Scipy</title><link href="https://aoustrich.github.io/blog/2023/3-Life-Lesson-from-Data-Science/" rel="alternate" type="text/html" title="3 Life Lessons from the Creator of Numpy and Scipy"/><published>2023-10-30T19:53:00+00:00</published><updated>2023-10-30T19:53:00+00:00</updated><id>https://aoustrich.github.io/blog/2023/3-Life-Lesson-from-Data-Science</id><content type="html" xml:base="https://aoustrich.github.io/blog/2023/3-Life-Lesson-from-Data-Science/"><![CDATA[<div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/networkGraph-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/networkGraph-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/networkGraph-1400.webp"/> <img src="/assets/img/networkGraph.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Learning from Data Science" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Earlier this month, BYU’s <a href="https://acme.byu.edu/">ACME</a> program celebrated the 10 year anniversary of its creation. Part of the festivities included an hour long lecture by one of the most influential Data Scientists of all time: <a href="https://www.linkedin.com/in/teoliphant/">Travis Oliphant</a>. Oliphant is the main creator of the popular Python packages numpy and scipy, the co-founder of Anaconda, and CEO of both <a href="https://quansight.com/">Quantsight</a> and <a href="https://www.openteams.com/">OpenTeams</a> (he’s also a former BYU Professor).</p> <p>He told us why he wrote these packages and started these companies to inspire us to go do our part to make the world a better place. I expected to learn a lot about python and data science from this lecture (and I definitely did), but I never thought I’d learn so much about life.</p> <h2 id="life-lesson-1-communication-is-critical">Life Lesson 1: Communication is Critical</h2> <p>This might not be the most ground-breaking principle, but the stories Oliphant shared gave me a new perspective.</p> <p>Everyone in the room seemed to chuckle in agreement when he said “Debugging is twice as hard as writing code,” maybe because as students it was nice to hear such an accomplished professional admit to having trouble writing code sometimes. He told us that it took him 4 months to write numpy and 14 months to “fix it.” (Maybe debugging is 3.5x as hard as writing?)</p> <p>With all the projects he’s worked on whether they’ve been academic, open-source, or professional over the last 25+ years of his career, Travis Oliphant has had his fair share of complications caused by misunderstandings and poorly communicated expectations.</p> <p>Who hasn’t?</p> <p>Writing code is a precise endeavor. Just the other day the python script I wrote to automate some processes at work through a few api calls worked perfectly on my own laptop, but created errors when I ran the code online. After frantically comparing my code to the documentation I realized I was passing a string as an argument instead of a list of strings.</p> <p>It made me wonder how often I think I’m being explicit with my words locally but my meaning is not properly conveyed globally. Whether it’s understanding project specifications or agreeing on the optimal order of steps to take, it’s easy for true meaning to get lost in our attempts to explain what we want or understand what others want.</p> <p>It’s at least twice as hard to “debug” what we say or hear than it is to speak or understand effectively. Communication is more than just saying words.</p> <blockquote class="block-tip"> <h5 id="key-takeaway">Key Takeaway</h5> <p>Speak simply and clearly so others understand what you mean. Listen simply and clearly so you understand what others mean.</p> </blockquote> <hr/> <h2 id="life-lesson-2-innovation-comes-unexpectedly">Life Lesson 2: Innovation Comes Unexpectedly</h2> <p>Despite being open source projects with dozens of contributors actively working on numpy and scipy, they had trouble getting widespread use of the packages. Experienced software developers and university professors could write the code, but didn’t know how to handle the “<a href="https://a16z.com/books/the-cold-start-problem/">Cold Start Problem</a>.”</p> <p>Almost randomly, Oliphant came across a windows installer for scipy that made the distribution of these packages much easier. This innovation eventually lead him to co-found one of the most popular Python and R distributions: <a href="https://www.anaconda.com/">Anaconda</a>.</p> <p>Wanna know the best part? The windows installer that <em>actually</em> changed the way we code today was written by a kid in high school.</p> <p>This wasn’t the only student that unexpectedly shaped the future of data science. During the creation of scipy and numpy, Travis Oliphant planned a brand new BYU class on processing medical scans and images. (Un)fortunately, though, the one student who registered later dropped the class and left a big hole in Oliphant’s schedule which was promptly filled with open source projects.</p> <p>This happened to be right around the time Oliphant was being evaluated for tenure which was eventually denied because he was more focused on building numpy and scipy than his other projects at the university.</p> <p>If the new class he created wasn’t a “failure” and he had “succeeded” by earning his tenure, we may have never gotten numpy or scipy.</p> <blockquote class="block-tip"> <h5 id="key-takeaway-1">Key Takeaway</h5> <p>Be meek and ready to learn from all people and all circumstances. Success and Failure are often matters of perspective.</p> </blockquote> <hr/> <h2 id="life-lesson-3-earnestly-try-to-do-good">Life Lesson 3: “Earnestly Try to Do Good”</h2> <p>One of the more unorthodox invitations Travis Oliphant gave us was to become interested in things other than math and coding. My initial reaction to this was something along the lines of “But shouldn’t I be focused on developing my math and coding skills if I want to be a Data Scientist?”</p> <p>But as he explained how his interests in music, economics, and business gave him creative breaks from working on python packages, I realized how much I’ve enjoyed some of my general education and elective classes at BYU (“<a href="https://catalog.byu.edu/courses/01567-001">Economic Principles and Problems</a>” and “Beginning Bowling” are some of my favorites).</p> <p>Travis Oliphant never planned to be a pioneering data scientist or python developer. His interests in Electrical Engineering and medical imaging led him to numpy and scipy.</p> <p>Having worked open source projects for decades, his admonition to contribute was inspirational and sums up my intentions with this site.</p> <blockquote> One of the best ways you can contribute to open source projects is by writing about what you learn. </blockquote> <blockquote class="block-tip"> <h5 id="key-takeaway-2">Key Takeaway</h5> <p>“Dont sit around waiting for someone to solve something. Do it.”</p> </blockquote> <hr/> <h2 id="conclusion">Conclusion</h2> <p>By prioritizing effective communication, embracing unforeseen innovation, and doing our best to “do good,” we pave the way for a more responsible and impactful data-driven future.</p> <p>This was a great lecture and I’m so glad to be part of a community of Leaders and Learners.</p> <p>One of the best things about researching for this post was that I found Quantsight’s <a href="https://quansight.com/about-us/#:~:text=DIRECTOR%0AQUANSIGHT%20LABS-,Our%20Values,-DO%2DERS">values</a> and realized that not only does Travis Oliphant live those values, but he invited us to do the same.</p>]]></content><author><name></name></author><category term="learnings"/><category term="links"/><summary type="html"><![CDATA[Life Lessons from Travis Oliphant]]></summary></entry><entry><title type="html">How and Why You Should Personalize Your Mac Terminal</title><link href="https://aoustrich.github.io/blog/2023/Personalize-Your-Terminal-Prompt/" rel="alternate" type="text/html" title="How and Why You Should Personalize Your Mac Terminal"/><published>2023-10-11T21:30:00+00:00</published><updated>2023-10-11T21:30:00+00:00</updated><id>https://aoustrich.github.io/blog/2023/Personalize-Your-Terminal-Prompt</id><content type="html" xml:base="https://aoustrich.github.io/blog/2023/Personalize-Your-Terminal-Prompt/"><![CDATA[ <p>Enter the world of data science, and you’ll soon realize that your computer’s Terminal isn’t just a tool; it’s a gateway to an uncharted realm of power and productivity. For over a year, I’ve been on a quest to uncover the secrets and unlock the potential of the Command Line Interface (CLI) and the journey has been nothing short of transformative. The CLI isn’t just a sea of obscure text—it’s a realm of power, capable of reshaping the way you work and interact with your data. From mastering Git for version control to effortlessly renaming mountains of files, from scripting automation tasks to setting up databases and managing packages, the CLI has been my trusty companion. Yet, amidst all the triumphs, one can’t help but notice the challenges—the daunting uniformity of text and the the disorienting sensation of navigating your directories.</p> <p>Over the last year I’ve learned a lot and made just a couple quick edits that have completely changed both my efficiency with and enjoyment from using the CLI. I’ve perused parts of the <a href="https://www.gnu.org/software/bash/manual/bash.html">Bash Reference Manual</a> and scoured a lot of Stack Overflow discussions to find solutions to my problems.</p> <p>If you want your terminal to be less boring and confusing, this is the post for you! I’ll be walking you through ways to change the color and the content of your terminal prompt (and maybe give an extra tip or two).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/defaultBash-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/defaultBash-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/defaultBash-1400.webp"/> <img src="/assets/img/defaultBash.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="From bad..." data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/addBranch-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/addBranch-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/addBranch-1400.webp"/> <img src="/assets/img/addBranch.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="...to Good" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="disclaimer-bash-v-zsh">Disclaimer: Bash v. Zsh</h2> <p>If you’re using your Mac’s Terminal, you’ve probably noticed the default shell is Zsh. As with anything related to computers and code, the Bash v. Zsh debate can be pretty intense at times even though <a href="https://www.geeksforgeeks.org/bash-scripting-difference-between-zsh-and-bash/">they’re very similar shells</a>. When I was first learning the CLI in my <a href="https://catalog.byu.edu/courses/14178-000">Data Science Ecosystems</a> class at BYU, my instructor used Bash so I followed his example. I honestly haven’t looked too far into the differences between the two shells, but I haven’t run into any issues with making Bash my default shell.</p> <p>All examples given below assume that Bash is the default and I suggest all readers follow along.</p> <p>To switch the default shell to Bash, run the following command and then enter your password as prompted.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chsh -s /bin/bash
</code></pre></div></div> <hr/> <h2 id="part-1-customizing-your-bash-prompt">Part 1: Customizing Your Bash Prompt</h2> <p>I prefer using a dark theme for my terminal so I’ve edited my basic profile by clicking “Terminal” in the top left corner of the screen near the Apple logo. The following path through the settings may be helpful: Terminal &gt; Settings &gt; Profiles &gt; Text (tab). Under the “Text” tab, I changed the background color to be Black, the Text and Bold Text to be white, and changed the cursor to be an underline that blinks (see red arrows below).</p> <p>None of these changes is required, but if you want to follow along with the tutorial, these changes should help our results look similar.</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/terminalProfileSettings-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/terminalProfileSettings-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/terminalProfileSettings-1400.webp"/> <img src="/assets/img/terminalProfileSettings.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Terminal Settings" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="step-1-display-username-as-prompt">Step 1: Display Username as Prompt</h3> <p>As shown below, my prompt is “Aarons-MacBook-Pro-65: ~ aoustrich$” which is the name of my machine with some extra details (not sure what the 65 is for) followed by a colon, the folder I’m in (~ means the root folder), and then finally my username with a $ at the end.</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/defaultBash-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/defaultBash-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/defaultBash-1400.webp"/> <img src="/assets/img/defaultBash.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Default Bash" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This is a very long prompt and doesn’t really give us much information to help us navigate the CLI.</p> <p>We can simplify this prompt to only include our username in just a few easy steps, but first we need to understand the <code class="language-plaintext highlighter-rouge">.bash_profile</code> a little better.</p> <p>You can think of the .bash_profile as a sort of settings or configuration file for your terminal. Running the command <code class="language-plaintext highlighter-rouge">nano .bash_profile</code> from the root (~) directory, we can open up the file to check out our settings. Depending on what software you have used so far, your <code class="language-plaintext highlighter-rouge">.bash_profile</code> will either be empty (i.e. just created by the nano command) or it will have some information already in it. Mine already had some things set up for conda and different paths for different versions of Python.</p> <p>Whether or not your <code class="language-plaintext highlighter-rouge">.bash_profile</code> is empty, create a new section called “Custom Terminal Prompt” by using the # as a comment character. Add the following lines to this section:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Custom Terminal Prompt

export CLICOLOR=1
PS1="\[\e[1;91m\]\u\[\e[m\]:" 
PS1+="&gt;&gt; "
export PS1;
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">export CLICOLOR=1</code> line tells the terminal to use different colors than what has been set up in the Prodile. <code class="language-plaintext highlighter-rouge">PS1</code> is string we’ll be building to become our new prompt. Setting <code class="language-plaintext highlighter-rouge">PS1="\[\e[1;91m\]\u\[\e[m\]:"</code> involves finding the username with the “\u” and the rest of the code controls the way the username is formatted. In this example, we display the username in bold red text (See the LSCOLORS section of <a href="https://gist.github.com/thomd/7667642">thomd’s repo</a> for more information on how the colors work). We set <code class="language-plaintext highlighter-rouge">PS1+="&gt;&gt; "</code> to add on two greater than symbols after the username so we can more easily see the end of our prompt. The last line <code class="language-plaintext highlighter-rouge">export PS1;</code> tells the terminal to use the new prompt.</p> <h4 id="save-the-bash_profile-and-refresh-your-terminal">Save the <code class="language-plaintext highlighter-rouge">.bash_profile</code> and “Refresh” Your Terminal</h4> <p>To save changes to the <code class="language-plaintext highlighter-rouge">.bash_profile</code> in the nano editor, enter the following commands:<code class="language-plaintext highlighter-rouge"> control + x</code>, <code class="language-plaintext highlighter-rouge">y</code>, and then <code class="language-plaintext highlighter-rouge">enter/return</code>.</p> <p>Changes made to the <code class="language-plaintext highlighter-rouge">.bash_profile</code> are not immediately displayed in the terminal because the current window is following the old instructions. To “refresh” your terminal and see the new changes, run the following command (or simply open a new window of the terminal).</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source ~/.bash_profile
</code></pre></div></div> <p>Your terminal should now look something like this.</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/addUsername-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/addUsername-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/addUsername-1400.webp"/> <img src="/assets/img/addUsername.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Username" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="step-2-add-current-working-directory-to-the-prompt">Step 2: Add Current Working Directory to the Prompt</h3> <p>Our new prompt can be made more useful if we displayed our current working directory since it’s easy to get lost in all the folders we may have in our project.</p> <p>Add new lines to the “Custom Terminal Prompt” section of your <code class="language-plaintext highlighter-rouge">.bash_profile</code> so it looks like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Custom Terminal Prompt

export CLICOLOR=1
PS1="\[\e[1;91m\]\u\[\e[m\]:" 
PS1+=" "
PS1+=”\[\e[1;96m\]\W\[\e[m\] ”
PS1+="&gt;&gt; "
export PS1;
</code></pre></div></div> <p>Similar to the line that formats the “\u” username, this new line <code class="language-plaintext highlighter-rouge">PS1+=”\[\e[1;96m\]\W\[\e[m\] "</code> prints our current directory in bold turquoise text.</p> <p>Save the changes to the <code class="language-plaintext highlighter-rouge">.bash_profile</code> and “Refresh” your terminal to see your current directory in the prompt. It’s easiest to see this updated propmpt if you change directories like this:</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/addDirectory-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/addDirectory-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/addDirectory-1400.webp"/> <img src="/assets/img/addDirectory.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Add Directory" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="step-3-show-the-current-branch-of-a-git-repo">Step 3: Show the Current Branch of a Git Repo</h3> <p>When working with Git and Github, it’s easy to confuse which branch you’re making edits and committing changes on. To make our lives easier, let’s add our current branch to our prompt.</p> <p>Add new lines to the “Custom Terminal Prompt” section of your <code class="language-plaintext highlighter-rouge">.bash_profile</code> so it looks like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Custom Terminal Prompt

export CLICOLOR=1

# Function to get Git branch
git_branch() {git branch 2&gt;/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/’ }

PS1="\[\e[1;91m\]\u\[\e[m\]:" 
PS1+=" "
PS1+=”\[\e[1;96m\]\W\[\e[m\] ”
PS1+=" "
PS1+=”\[\e[0;92m\]\$(git_branch)\[\e[m\]”
PS1+="&gt;&gt; "
export PS1;
</code></pre></div></div> <p>After saving and “Refreshing” our <code class="language-plaintext highlighter-rouge">.bash_profile</code>, our terminal prompt should now show what branch we are working on in light purple text. (Note: If we are not in an initialized git repo, nothing will show up.)</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/addBranch-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/addBranch-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/addBranch-1400.webp"/> <img src="/assets/img/addBranch.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Add Branch" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="part-2-making-the-ls-command-easier-to-read">Part 2: Making the <code class="language-plaintext highlighter-rouge">ls</code> Command Easier to Read</h2> <p>By default, running <code class="language-plaintext highlighter-rouge">ls</code> shows the items in a current directory, but it doesn’t tell us much about what each item is. If I’m working in a directory I haven’t used in a while or if I’ve cloned someone else’s repository from GitHub, it can be pretty difficult to know what’s going on in the directory and I might accidentally try to “cd” into a text file that doesn’t have the ‘.txt’ extension.</p> <p>Solution: Change the <code class="language-plaintext highlighter-rouge">.bash_profile</code> to customize how different items will be displayed by the <code class="language-plaintext highlighter-rouge">ls</code> command. Use this <a href="https://geoff.greer.fm/lscolors/">tool</a> to customize your <code class="language-plaintext highlighter-rouge">ls</code> results.</p> <p>Add new lines to the “Custom Terminal Prompt” section of your <code class="language-plaintext highlighter-rouge">.bash_profile</code> so it looks like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Custom Terminal Prompt

export CLICOLOR=1

# Function to get Git branch
git_branch() {git branch 2&gt;/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/’ }

PS1="\[\e[1;91m\]\u\[\e[m\]:" 
PS1+=" "
PS1+=”\[\e[1;96m\]\W\[\e[m\] ”
PS1+=" "
PS1+=”\[\e[0;92m\]\$(git_branch)\[\e[m\]”
PS1+="&gt;&gt; "
export PS1;

# Export LS Colors
export LSCOLORS=XefxcxdxXDegedabagacad 
</code></pre></div></div> <p>After saving and “Refreshing” our <code class="language-plaintext highlighter-rouge">.bash_profile</code>, our terminal should now show directories with a blue background and executable files with a brown background.</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/lsColors-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/lsColors-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/lsColors-1400.webp"/> <img src="/assets/img/lsColors.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Custom ls" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="part-3-extra-tips">Part 3: Extra Tips</h2> <ul> <li> <p>It’s annoying to see the “Last login: “ message when opening up a new session of the Terminal. You can get rid of this by running <code class="language-plaintext highlighter-rouge">touch .hushlogin</code> at the root level.</p> </li> <li> <p>Add “export BASH_SILENCE_DEPRECATION_WARNING=1” to the <code class="language-plaintext highlighter-rouge">.bash_profile</code> to get rid of the “default interactive shell is Zsh” message shown in new windows.</p> </li> </ul> <p>If both these steps are completed, it should look like this when you open a new terminal window:</p> <div class="row justify-content-md-center"> <div class="col-lg-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/cleanStart-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/cleanStart-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/cleanStart-1400.webp"/> <img src="/assets/img/cleanStart.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Clean Start" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="final-thoughts">Final Thoughts</h2> <p>One of the most empowering things about the journey to learn Data Science/Analytics is how many things you learn along the way that allow you to customize your workflow.</p> <p>I encourage you to follow the steps I’ve given to make your learning journey just a little bit more efficient and enjoyable by personalizing your Mac Terminal. Experiment with different ways of formatting the various parts of the <code class="language-plaintext highlighter-rouge">PS1</code> prompt and do what makes life easier for you!</p> <p>And when you find a prompt that works for your needs, let me know what it looks like!</p> <p>As always…</p> <p>Enjoy your Adventures in Analytics!</p>]]></content><author><name></name></author><category term="How-To"/><category term="links"/><category term="code"/><summary type="html"><![CDATA[Make your CLI experience more enjoyable with these tips and tricks.]]></summary></entry></feed>